
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://wctgmidvzjpvuocmqvfz.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndjdGdtaWR2empwdnVvY21xdmZ6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDcxMTg1MTQsImV4cCI6MjA2MjY5NDUxNH0.U41cc8csJQgtib0tqbSgD5gEq9eioniPZuMJdc_j1Xs";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create a single instance of the Supabase client to use throughout the application
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    storage: localStorage
  }
});

// Helper to clean up auth state to prevent login issues
export const cleanupAuthState = () => {
  console.log('Cleaning up auth state');
  
  // Remove standard auth tokens
  localStorage.removeItem('supabase.auth.token');
  sessionStorage?.removeItem('supabase.auth.token');
  
  // Remove all Supabase auth keys
  Object.keys(localStorage).forEach((key) => {
    if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
      localStorage.removeItem(key);
    }
  });
  
  // Also clean sessionStorage if it exists
  if (typeof sessionStorage !== 'undefined') {
    Object.keys(sessionStorage).forEach((key) => {
      if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
        sessionStorage.removeItem(key);
      }
    });
  }
};
